<?php

namespace Orra\Career\Model;

use Magento\Framework\DataObject\IdentityInterface;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\Context;
use Magento\Framework\Registry;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Stdlib\DateTime\DateTimeFactory;
use Orra\Career\Model\ResourceModel\Career as ResourceCareer;

class Career extends AbstractModel implements IdentityInterface
{
    /**
     * @var string
     */
    public const CACHE_TAG = 'orra_career';

    /**
     * @var string
     */
    protected $_cacheTag = 'orra_career';

    /**
     * @var string
     */
    protected $_eventPrefix = 'orra_career';

    /**
     * @var DateTimeFactory
     */
    protected $dateTimeFactory;

    /**
     * Career construct
     *
     * @param Context $context
     * @param Registry $registry
     * @param DateTimeFactory $dateTimeFactory
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        Context          $context,
        Registry         $registry,
        DateTimeFactory  $dateTimeFactory,
        AbstractResource $resource = null,
        AbstractDb       $resourceCollection = null,
        array            $data = []
    ) {
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
        $this->dateTimeFactory = $dateTimeFactory;
    }

    /**
     * Construct
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init(ResourceCareer::class);
    }

    /**
     * GetIdentities
     *
     * @return string[]
     */
    public function getIdentities()
    {
        return [self::CACHE_TAG . "_" . $this->getId()];
        // TODO: Implement getIdentities() method.
    }

    /**
     * GetDefaultValues
     *
     * @return array
     */
    public function getDefaultValues()
    {
        $values = [];
        return $values;
    }

    /**
     * Beforesave
     *
     * @return Career
     */
    public function beforeSave()
    {
        if ($this->getId()) {
            $this->setUpdatedAt($this->dateTimeFactory->create()->gmtDate());
        }
        return parent::beforeSave(); // TODO: Change the autogenerated stub
    }
}
